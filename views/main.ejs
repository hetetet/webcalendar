  <span id="buttons">
    <button id="bgcolor" class="defaultbutton" onclick="location.href='/stats'">태그 통계</button>
    <button id="bgcolor"  class="defaultbutton" onclick="location.href='/dashboard'">대시보드</button>
  </span>
  <h1 style="width: 100%; text-align: center" class="bold">일정 관리</h1>
  <div id="maincontainer">
    <div id="category">
      <span id="category_header">
        <h2 style="width: 60%; text-align: left; margin-left: 5%;" class="bold" >카테고리</h2>
        <button id="addcategory" class="addbtn" onclick="openModal()">+</button>
      </span> 
      <span>
        <button id="bgcolor" class="defaultbutton" style="position: inherit; width: 50%;" onclick="getTodoList()">모든 일정 보기</button> 
        <h3 style="width: 60%; text-align: left; margin-left: 5%;">생성한 일정</h3>
      </span> 
      <div id="created-category">        
        </div>  
          <h3 style="width: 60%; text-align: left; margin-left: 5%;">공유 받은 일정</h3>
        <div id="shared-category">        
      </div>  
    </div>
    <div id='calendar'></div>
  </div>
  <div class="modal hidden">
    <div class="modal__overlay">
      <div id="modal_category" class="modal__content">
        <span class="modal__header">
          <h1 class="bold">카테고리 추가/수정</h1>
          <button class="close" onclick="closeModal()">X</button>
        </span>
        <div id="category-title-box" class="category-infos">
          <span>카테고리 제목: </span>
          <textarea id="category-title"></textarea>
        </div>
        <div id="category-tag-box" class="category-infos">
          <span>태그: </span>
          <span id="category-tag-list">
            <span id="category-tag-addarea">
              <textarea id= "category-tag-textbox" ></textarea>
              <button id="addtag" class="addbtn">+</button>
            </span>
            <div class="count"><span id="tag-val-num">0</span>/50</div>
            <div id="taglist"></div>
          </span>
        </div>
        <div id="category-sharecheck-box" class="category-infos" >
          <div>공유여부: </div>
          <label><input type="checkbox" name="category-sharecheck"></label>
        </div>
        <div id="category-share-box" class="category-infos" style="visibility: hidden;">
          <div>공유할 사용자 </div>
          <button id="adduser" class="addbtn" style="width: 30px; height: 30px; text-align: justify;" onclick="opensubModal()">+</button>
        </div>
        <div id="category-sharelist-box" class="category-infos">
          <div></div>
          <div id="category-sharelist"></div>
        </div>
        <button id="savecategory" class="defaultbutton" onclick="savecategory()">카테고리 저장</button>
      </div>
    </div>
  </div>
  <div class="submodal hidden">
    <div id="modal_users" class="modal__content">
      <span class="modal__header">
        <h1 class="bold">공유할 사용자 목록</h1>
        <button class="closesub" onclick="closesubModal()">X</button>
      </span>        
      <div id="user-list">
      </div>
      <button id="sharecategory" class="defaultbutton" style="margin-top: 5px;" onclick="saveuser()">공유하기</button>
    </div>
  </div>
  <div class="todolist-modal hidden">
    <div class="modal__overlay">
      <div id="modal_todolist" class="modal__content"> 
        <span class="modal__header">
          <h1 class="bold">일정 목록</h1>
          <button class="closesub" onclick="hidetodolist()">X</button>
        </span>
        <div id="todolist-list">
        </div>       
      </div>     
    </div>
  </div>
  <div class="tooltip hidden">
    <div id="name">
    </div>
  </div>

<link href='/fullcalendar/main.css' rel='stylesheet'/>
<script src='/fullcalendar/main.js'></script>
<script>
/**
 *카테고리 생성 모달 띄우기 
**/
let tags=[];
let remove_tags=[];
let shared_categories_tags=[];
let shared_cat_arr=[];
let can_search_share=false;
let eventlist=[]
let eventstrlist=[]

const addTodoBtn=document.getElementById('addTodoBtn');
const todoModal=document.querySelector('.modal');
const overlay=todoModal.querySelector(".modal__overlay");
const closeBtn=todoModal.querySelector(".close");
const todolist_modal=document.querySelector('.todolist-modal')
let user_idnames=new Set();

const openModal=()=>{
    document.querySelector('#category-title').value='';
    document.querySelector("#taglist").innerHTML='' //태그 목록 자식 노드 싹 다 비우기
    document.querySelector('#category-tag-textbox').value='';
    document.querySelector("#category-sharelist").innerHTML='' //사용자 목록 자식 노드 싹 다 비우기
    tags=[]
    remove_tags=[]
    todoModal.classList.remove("hidden")
  }
const closeModal=()=>{
    user_idnames=new Set()//이름 목록도 비우기
    todoModal.classList.add("hidden")
  }
  /**
  * 카테고리 공유여부
  **/
  const category_sharecheck_box=document.getElementsByName('category-sharecheck')
  const category_share=document.getElementById('category-share-box')
  category_sharecheck_box[0].addEventListener('click',()=>{
    if(!category_sharecheck_box[0].checked){
      category_share.style.visibility = "hidden"
      document.querySelector("#category-sharelist").innerHTML='' //자식 노드 싹 다 비우기
    }else{
      category_share.style.visibility = "visible"
    }
  })
  /**
  * 카테고리에 태그 추가
  **/
  //add tag
  let calendar
  const category_tag_textbox=document.getElementById('category-tag-textbox')
  const addtag=document.getElementById('addtag')
  const taglist=document.getElementById('taglist')
  const tag_val_num=document.getElementById('tag-val-num')

    category_tag_textbox.addEventListener("keyup",()=>{
      console.log(category_tag_textbox.value.length)
      tag_val_num.innerHTML=category_tag_textbox.value.length;
      if (category_tag_textbox.value.length > 50){
        alert("태그는 최대 50자까지 입력 가능합니다.");
        category_tag_textbox.value=category_tag_textbox.value.substring(0, 50)
        //$(this).val(category_tag_textbox.value.substring(0, 50));
        tag_val_num.innerHTML=50;
      }
    })
    addtag.addEventListener("click",()=>{
    //add tag in taglist
    if(category_tag_textbox.value.length>0 && !tags.includes(category_tag_textbox.value)){
        addTag(category_tag_textbox.value)
      }
    })

    function addTag(tagname){
      if(tags.includes(tagname))
        return;
      let index=tags.push(tagname)
      let tagItem=document.createElement("div")
      tagItem.classList.add("item");
      tagItem.style.backgroundColor='lightgray'
      tagItem.innerHTML=`
        <span class="delete-btn" onclick="deleteTag(this,'${tagname}')" style="cursor: pointer;">
          &times;
        </span>
        <span>${tagname}</span>`;  
      taglist.appendChild(tagItem);
      console.log("tags after add tag:", tags)   
      console.log("remove_tags after add tag:", remove_tags)       
    }

    function deleteTag(ref,tag){
      let parent=ref.parentNode.parentNode
      parent.removeChild(ref.parentNode)
      let index=tags.indexOf(tag);
      tags.splice(index,1);
      console.log("tags after delete tag:", tags)   
      console.log("remove_tags after delete tag:", remove_tags)  
    }

    /**
    * 사용자 목록 모달 띄우기
    **/
    const adduser=document.getElementById('adduser');
    const userModal=document.querySelector('.submodal');
    const closesubBtn=todoModal.querySelector(".closesub");

    const opensubModal=()=>{
    userModal.classList.remove("hidden")
    fetch("/userlist",{
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({"data":'<%-JSON.parse(userinfo)._id %>'})
    }).then(res => {
    if (!res.ok) {
      throw new Error("HTTP error " + res.status);
    }
    return res.json();                              
    })
    .then(data => {
    //console.log(data.data); //공유할 수 있는 사용자 목록(본인을 제외한 모든 사용자)
    let userlist=data.data
    console.log("userlist: ",userlist); 
    for(user in userlist){
        let userstr=userlist[user]
        console.log("userstr: ", userstr)
        let userjson=JSON.parse(userstr)
        let user_element=document.createElement("div")
        let checkbox_elem
        console.log(JSON.stringify(userjson));
        console.log("user_idnames: ",user_idnames)
        console.log("hasuser: ",user_idnames.has(userstr))
        if(user_idnames.has(userstr)){
          checkbox_elem=`<input type="checkbox" value='${userstr}' onclick="addUser(this)" checked="true" name="category-sharecheck">`
        }else{
          checkbox_elem=`<input type="checkbox" value='${userstr}' onclick="addUser(this)" name="category-sharecheck">`
        }
        user_element.innerHTML=checkbox_elem+`
          <img class="pfp_inlist" src=${userjson.pfpurl}/>
          <span>${userjson.name}</span>
        `;  
        document.querySelector("#user-list").appendChild(user_element);
      }
      //이미 set에 있는 사용자라면 체크하기
      })
    }
      const closesubModal=()=>{
      document.querySelector("#user-list").innerHTML='' //자식 노드 싹 다 비우기
      userModal.classList.add("hidden")
    }

    /**
    *유저 id, 유저 이름 배열 삽입 및 삭제
    **/
    function addUser(ref){
      if(ref.checked){
        console.log("Add", ref.value) 
        user_idnames.add(ref.value)
      }else{
        console.log("Delete", ref.value) 
        user_idnames.delete(ref.value)      
      }
      console.log(user_idnames);
    }

    /**
    * 공유할 사용자 카테고리 생성 목록으로 넘기기
    **/
    const userlist=document.getElementById("category-sharelist")
      function saveuser(){
      document.querySelector("#category-sharelist").innerHTML='' //자식 노드 싹 다 비우기
      console.log(user_idnames.size);
      for(let item of user_idnames){
        let userjson=JSON.parse(item)
        let user_element_category=document.createElement("div")
        user_element_category.innerHTML=`
            <span class="delete-btn" value='${item}' onclick="deleteUserelem(this)" style="cursor: pointer;">
              &times;
            </span>
            <img class="pfp_inlist" src=${userjson.pfpurl}/>
            <span>${userjson.name}</span>
            `;  
          userlist.appendChild(user_element_category);
        }
        document.querySelector("#user-list").innerHTML='' //자식 노드 싹 다 비우기
        userModal.classList.add("hidden")
    }
      function deleteUserelem(ref){
      let parent=ref.parentNode.parentNode
      parent.removeChild(ref.parentNode)
      console.log(ref.getAttribute("value"))
      user_idnames.delete(ref.getAttribute("value"))
      console.log(user_idnames)
    }
    /**
    *카테고리 저장하기
    */
    function savecategory(){
      if(document.querySelector("#category-title").value==0){
        alert("카테고리 제목은 필수 입력 항목입니다.")
        return
      }
      let useridarr=[]
      if(category_sharecheck_box[0].checked){
        for(let item of user_idnames){
          useridarr.push(JSON.parse(item)._id)
        }
      }
      console.log(useridarr);
      console.log("tags before fetch to server:", tags)
      console.log("remove_tags before fetch to server:", remove_tags)
      let data = {
        title: document.querySelector("#category-title").value,
        tags: tags,
        removetags: remove_tags,
        uploader: `<%- JSON.parse(userinfo)._id %>`,
        share_user:useridarr
      }
      console.log(data)
      fetch("/savecategory",{
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data)
        }).then(res => {
          if (!res.ok) {
            throw new Error("HTTP error " + res.status);
            return res.json();   
          }                         
        })
      alert("카테고리를 저장하였습니다.")   
      document.querySelector("#user-list").innerHTML='' //자식 노드 싹 다 비우기
      userModal.classList.add("hidden")
      fetchCreatedCat()
      closeModal()
    }
/**
*페이지가 로딩되면 달력을 렌더링하는 이벤트리스너 
*/
let calendarEl = document.getElementById('calendar');
document.addEventListener('DOMContentLoaded', function() {
  getTodoList()
});

/**
 * 일정 목록 가져오는 함수
 */ 
function getTodoList(){
    //일정 목록 가져오기
    fetch("/todolist",{
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({"data":'<%-JSON.parse(userinfo)._id %>'})
    }).then(res => {
      if (!res.ok) {
        throw new Error("HTTP error " + res.status);
      }
      return res.json();                              
    })
    .then(data => {
      //console.log(data.data)
      eventstrlist=data.data
      renderCalendar(eventstrlist)   
      let allevents=calendar.getEvents()
      console.log("getevents:", allevents)     
    })
    fetchCreatedCat()
    fetchSharedCat()
}

let created_categories=document.querySelector('#created-category')
let shared_categories=document.querySelector('#shared-category')
/**
 *일정 목록 모달을 숨기는 함수
 */
function hidetodolist(){
  todolist_modal.classList.add("hidden")
}

/**
 *본인이 생성한 카테고리 목록을 가져오는 함수
 */
function fetchCreatedCat(){
  shared_cat_arr=[]
  fetch("/created-category",{
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({"data":'<%-JSON.parse(userinfo)._id %>'})
    }).then(res => {
    if (!res.ok) {
      throw new Error("HTTP error " + res.status);
    }
    return res.json();                              
    }).then(data => {
      // console.log("created category: ", data)
      let create_cat_arr=data.data;
      created_categories.innerHTML=''
      for(index in create_cat_arr){
        console.log(create_cat_arr[index].title)
        let created_cat=document.createElement('div')
        created_cat.classList.add('created-cat')
        created_cat.innerHTML=`
          <span class="created-cat-title" onclick="showTodoWithCat('${create_cat_arr[index].title}')">${create_cat_arr[index].title}</span>
          <button id="edit-category" class="cat-btn" onclick="fetchCategory(this,'${create_cat_arr[index].title}')">수정</button>
          <button id="delete-category" class="cat-btn" onclick="deleteCategory(this,'${create_cat_arr[index].title}')">삭제</button>
          `
        created_categories.appendChild(created_cat);
      }
    })
}

/**
 *공유받은 카테고리 목록을 가져오는 함수
 */
function fetchSharedCat(){
  fetch("/shared-category",{
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({"data":'<%-JSON.parse(userinfo)._id %>'})
    }).then(res => {
    if (!res.ok) {
      throw new Error("HTTP error " + res.status);
    }
    return res.json();                              
    }).then(data => {
      // console.log("shared category: ", data)
      shared_cat_arr=data.data;
      shared_categories.innerHTML=''
      shared_categories_tags=[]
      for(index in shared_cat_arr){
        console.log(shared_cat_arr[index].title)
        shared_categories_tags.push(shared_cat_arr[index].tags)
        let shared_cat=document.createElement('div')
        shared_cat.classList.add('shared-cat')
        shared_cat.innerHTML=`
          <span class="shared-cat-title" onclick="showTodoWithCat('${shared_cat_arr[index].title}')">${shared_cat_arr[index].title}</span>
          `
        shared_categories.appendChild(shared_cat);
        for(subindex in shared_cat_arr[index].share_user){
          let shared_user=document.createElement('div')
          shared_user.innerHTML=`<span style="color:gray;">${shared_cat_arr[index].share_user}</span>`
          shared_cat.appendChild(shared_user)
        }
      }
      console.log("shared_categories_tags: ",shared_categories_tags)
    })
}
/**
 *생성한 카테고리 목록을 가져오는 함수
 */
function fetchCategory(ref,catname){
  console.log("edit "+catname)
  let parent=ref.parentNode
  console.log("parent: ",parent)
  fetch("/readcategory",{
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({"title":catname})
    }).then(res => {
    if (!res.ok) {
      throw new Error("HTTP error " + res.status);
    }
    return res.json();                              
    }).then(data => {
      openModal()
      let catobj=data.data
      document.querySelector('#category-title').value=data.data.title;
      tags=data.data.tags;
      remove_tags=Array.from(tags);
      console.log("tags after fetch from server:", tags)
      console.log("remove_tags after fetch from server:", remove_tags)
      taglist.innerHTML=''
      for(index in tags){
        let tagItem=document.createElement('div')
        tagItem.classList.add("item");
        tagItem.style.backgroundColor='lightgray'
        tagItem.innerHTML=`
        <span class="delete-btn" onclick="deleteTag(this,'${tags[index]}')" style="cursor: pointer;">
          &times;
        </span>
        <span>${tags[index]}</span>`;  
        taglist.appendChild(tagItem);  
      }
      let users=data.users
      if(users.length>0){
        console.log(users)
        category_sharecheck_box[0].checked=true
        category_share.style.visibility = "visible"
        for(let index in users){
          user_idnames.add(JSON.stringify([index]))
          let user_element_category=document.createElement("div")
          user_element_category.innerHTML=`
            <span class="delete-btn" value='${users[index]}' onclick="deleteUserelem(this)" style="cursor: pointer;">
              &times;
            </span>
            <img class="pfp_inlist" src=${users[index].pfpurl}/>
            <span>${users[index].name}</span>
            `;  
          userlist.appendChild(user_element_category);
        }
      }
    })
}
/**
 *카테고리 삭제 함수
 */
function deleteCategory(ref,catname){
  console.log("delete "+catname)
  let parent=ref.parentNode.parentNode
 parent.removeChild(ref.parentNode)
  console.log("parent: ",parent)
  fetch("/deletecategory",{
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      "title":catname,
    })
    }).then(res => {
    if (!res.ok) {
      throw new Error("HTTP error " + res.status);
    }
  })
}
/**
 *특정 카테고리에 속한 일정을 보여주는 함수
 */
function showTodoWithCat(category){
  console.log("show todos only in category ",category)
  fetch("/show-certain-cat",{
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        "title":category,
        "_id": '<%-JSON.parse(userinfo)._id %>'
      })
    }).then(res => {
      if (!res.ok) {
        throw new Error("HTTP error " + res.status);
      }
      return res.json();                              
    }).then(data => {
      console.log(data)
      eventstrlist=data.data
      renderCalendar(eventstrlist)
      let allevents=calendar.getEvents()
      console.log("getevents:", allevents)
    })
    
/**
 *달력 날짜 클릭하면 그 날짜에 일정들 가져오기
 */
let daygrids=document.getElementsByClassName('fc-daygrid-day')
for(let i=0;i<daygrids.length;i++){
  daygrids[i].addEventListener('click',(event)=>{
      console.log(event.target)
    })
  }
}
/**
 * 이벤트를 받아 달력을 렌더링하는 함수
 */
function renderCalendar(eventstrparam){
    eventlist=[];
    for(let i=0;i<eventstrparam.length;i++){
      eventlist.push(JSON.parse(eventstrparam[i]))
      if(eventlist[i].allday==true){
        eventlist[i].start=eventlist[i].start.split('T')[0] //allday가 true면 뒤에 시간은 표시 안되게
        let edited_endday=new Date(eventlist[i].end) //fullcalendar의 allday가 true일 경우 일정의 마지막 날이 표시되지 않는 버그 교정
        edited_endday.setDate(edited_endday.getDate()+1) 
        edited_endday=edited_endday.toISOString().split('T')[0]
        console.log("after editing: ",eventlist[i].start,edited_endday)
        eventlist[i].end=edited_endday
      }
    }
    console.log('gonna render this events: ',eventlist)
    calendar = new FullCalendar.Calendar(calendarEl, {
    timeZone: 'Asia/Seoul',
    headerToolbar: {
      left: 'prevYear,prev,next,nextYear',
      center: 'title',
      right: 'today'
    },
      editable: false,
      selectable: true,
      businessHours: true,
      dayMaxEvents: true, // allow "more" link when too many events
      events: eventlist,
      dateClick: function(info) {
        
        let dayevents=document.getElementsByClassName('fc-daygrid-event')
        let showevent=[]
        let startpoint=new Date(info.dateStr)
        let endpoint=new Date(info.dateStr)

        startpoint=startpoint.toISOString().split('T')[0]
        endpoint.setDate(endpoint.getDate()+1) //끝점은 시작점보다 정확히 하루, 즉 24시간 후
        endpoint=endpoint.toISOString().split('T')[0]
        console.log("startpoint:", startpoint, "endpoint: ",endpoint)        
        console.log("eventstrlist: ", eventstrlist);
        todolist_modal.classList.remove("hidden")
        
        let todolist_list=document.querySelector("#todolist-list")
        todolist_list.innerHTML="" //일정 목록 모달 내 일정 목록 초기화
        for(index in eventstrlist){
          let event=JSON.parse(eventstrlist[index])
          if((event.allday && event.start<=startpoint && event.end>=startpoint) 
          || (!event.allday && event.start<endpoint && event.end>=startpoint)){
            console.log("오늘의 일정: ",event)
            let start_date_str=timeformat(event.start)
            let end_date_str=timeformat(event.end)

            console.log(start_date_str,end_date_str)
            let todoItem=document.createElement("div")
            todoItem.classList.add("todo-element");
            todoItem.innerHTML=`<div class="todo-element">
              <div class="todo-title" style="font-size: 25px;">
                ${event.title}
              </div>
              <span class="todo-start" style="font-size: 18px;">
                ${start_date_str}
              </span> ~ 
              <span class="todo-start" style="font-size: 18px;">
                ${end_date_str}
              </span>
            </div>`
            todolist_list.appendChild(todoItem);
          }          
        }
        if(todolist_list.innerHTML=="")
          todolist_list.innerHTML="해당 일자에는 일정이 없습니다."
      }
    });
    calendar.render();
}

/**
 *년,월,일,시,분,초로 시간 포맷 변경 
 */ 
 function timeformat(datestr){
  if(datestr.includes('T')){ //allday:false
    let returnstr=""
    datestrs=datestr.split('T')
    datestrs[0]=datestrs[0].split('-') //날짜 부분
    datestrs[1]=datestrs[1].split(':') //시간 부분
    returnstr+=datestrs[0][0]+"년 "+datestrs[0][1]+"월 "+datestrs[0][2]+"일 "
    if(Number(datestrs[1][0])==0){
      returnstr+='오전 12시 '
    }else if(datestrs[1][0]<12){
      returnstr+='오전 '+datestrs[1][0]+'시 '
    }else if(datestrs[1][0]==12){
      returnstr+='오후 12시 '
    }else{
      returnstr+='오후 '+String(datestrs[1][0]-12)+'시 '
    }
    returnstr+=datestrs[1][1]+"분"
    return returnstr
  }else{ //allday:true
    datestrs=datestr.split('-')
    return datestrs[0]+"년 "+datestrs[1]+"월 "+datestrs[2]+"일"
  }
}
</script>


